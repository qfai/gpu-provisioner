/*
       Copyright (c) Microsoft Corporation.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/arc/client.go

package fake

import (
	"context"
	"fmt"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcontainerservice/armhybridcontainerservice"
	"go.uber.org/mock/gomock"
	karpenterv1 "sigs.k8s.io/karpenter/pkg/apis/v1"
)

// MockHybridAgentPoolsAPI is a mock of HybridAgentPoolsAPI interface.
type MockHybridAgentPoolsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockHybridAgentPoolsAPIMockRecorder
}

// MockHybridAgentPoolsAPIMockRecorder is the mock recorder for MockHybridAgentPoolsAPI.
type MockHybridAgentPoolsAPIMockRecorder struct {
	mock *MockHybridAgentPoolsAPI
}

// NewMockHybridAgentPoolsAPI creates a new mock instance.
func NewMockHybridAgentPoolsAPI(ctrl *gomock.Controller) *MockHybridAgentPoolsAPI {
	mock := &MockHybridAgentPoolsAPI{ctrl: ctrl}
	mock.recorder = &MockHybridAgentPoolsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHybridAgentPoolsAPI) EXPECT() *MockHybridAgentPoolsAPIMockRecorder {
	return m.recorder
}

// BeginCreateOrUpdate mocks base method.
func (m *MockHybridAgentPoolsAPI) BeginCreateOrUpdate(ctx context.Context, connectedClusterResourceURI, agentPoolName string, agentPool armhybridcontainerservice.AgentPool, options *armhybridcontainerservice.AgentPoolClientBeginCreateOrUpdateOptions) (*runtime.Poller[armhybridcontainerservice.AgentPoolClientCreateOrUpdateResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginCreateOrUpdate", ctx, connectedClusterResourceURI, agentPoolName, agentPool, options)
	ret0, _ := ret[0].(*runtime.Poller[armhybridcontainerservice.AgentPoolClientCreateOrUpdateResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginCreateOrUpdate indicates an expected call of BeginCreateOrUpdate.
func (mr *MockHybridAgentPoolsAPIMockRecorder) BeginCreateOrUpdate(ctx, connectedClusterResourceURI, agentPoolName, agentPool, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCreateOrUpdate", reflect.TypeOf((*MockHybridAgentPoolsAPI)(nil).BeginCreateOrUpdate), ctx, connectedClusterResourceURI, agentPoolName, agentPool, options)
}

// BeginDelete mocks base method.
func (m *MockHybridAgentPoolsAPI) BeginDelete(ctx context.Context, connectedClusterResourceURI, agentPoolName string, options *armhybridcontainerservice.AgentPoolClientBeginDeleteOptions) (*runtime.Poller[armhybridcontainerservice.AgentPoolClientDeleteResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDelete", ctx, connectedClusterResourceURI, agentPoolName, options)
	ret0, _ := ret[0].(*runtime.Poller[armhybridcontainerservice.AgentPoolClientDeleteResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDelete indicates an expected call of BeginDelete.
func (mr *MockHybridAgentPoolsAPIMockRecorder) BeginDelete(ctx, connectedClusterResourceURI, agentPoolName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDelete", reflect.TypeOf((*MockHybridAgentPoolsAPI)(nil).BeginDelete), ctx, connectedClusterResourceURI, agentPoolName, options)
}

// Get mocks base method.
func (m *MockHybridAgentPoolsAPI) Get(ctx context.Context, connectedClusterResourceURI, agentPoolName string, options *armhybridcontainerservice.AgentPoolClientGetOptions) (armhybridcontainerservice.AgentPoolClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, connectedClusterResourceURI, agentPoolName, options)
	ret0, _ := ret[0].(armhybridcontainerservice.AgentPoolClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHybridAgentPoolsAPIMockRecorder) Get(ctx, connectedClusterResourceURI, agentPoolName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHybridAgentPoolsAPI)(nil).Get), ctx, connectedClusterResourceURI, agentPoolName, options)
}

// NewListByProvisionedClusterPager mocks base method.
func (m *MockHybridAgentPoolsAPI) NewListByProvisionedClusterPager(connectedClusterResourceURI string, options *armhybridcontainerservice.AgentPoolClientListByProvisionedClusterOptions) *runtime.Pager[armhybridcontainerservice.AgentPoolClientListByProvisionedClusterResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByProvisionedClusterPager", connectedClusterResourceURI, options)
	ret0, _ := ret[0].(*runtime.Pager[armhybridcontainerservice.AgentPoolClientListByProvisionedClusterResponse])
	return ret0
}

// NewListByProvisionedClusterPager indicates an expected call of NewListByProvisionedClusterPager.
func (mr *MockHybridAgentPoolsAPIMockRecorder) NewListByProvisionedClusterPager(connectedClusterResourceURI, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByProvisionedClusterPager", reflect.TypeOf((*MockHybridAgentPoolsAPI)(nil).NewListByProvisionedClusterPager), connectedClusterResourceURI, options)
}

// Helper function to create agent pool object with node claim for Arc AKS
func CreateHybridAgentPoolObjWithNodeClaim(nc *karpenterv1.NodeClaim) armhybridcontainerservice.AgentPool {
	return armhybridcontainerservice.AgentPool{
		Name: &nc.Name,
		ID:   to.Ptr(fmt.Sprintf("azure:///subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/nodeRG/providers/Microsoft.Kubernetes/connectedClusters/test-cluster/providers/Microsoft.HybridContainerService/provisionedClusters/test-cluster/agentPools/%s", nc.Name)),
		Properties: &armhybridcontainerservice.AgentPoolProperties{
			VMSize: to.Ptr(nc.Spec.Requirements[0].Values[0]),
			NodeLabels: map[string]*string{
				"test":                          to.Ptr("test"),
				"kaito.sh/workspace":            to.Ptr("none"),
				karpenterv1.NodePoolLabelKey:    to.Ptr("kaito"),
			},
			OSType: to.Ptr(armhybridcontainerservice.OsTypeLinux),
			Count:  to.Ptr(int32(1)),
			Status: &armhybridcontainerservice.AgentPoolProvisioningStatusStatus{
				CurrentState: to.Ptr(armhybridcontainerservice.ResourceProvisioningStateSucceeded),
			},
		},
	}
}

// Helper function to create a simple hybrid agent pool for testing
func CreateSimpleHybridAgentPool(name, vmSize string) armhybridcontainerservice.AgentPool {
	return armhybridcontainerservice.AgentPool{
		Name: to.Ptr(name),
		ID:   to.Ptr(fmt.Sprintf("azure:///subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/nodeRG/providers/Microsoft.Kubernetes/connectedClusters/test-cluster/providers/Microsoft.HybridContainerService/provisionedClusters/test-cluster/agentPools/%s", name)),
		Properties: &armhybridcontainerservice.AgentPoolProperties{
			VMSize: to.Ptr(vmSize),
			NodeLabels: map[string]*string{
				"kaito.sh/workspace":            to.Ptr("test-workspace"),
				karpenterv1.NodePoolLabelKey:    to.Ptr("kaito"),
			},
			OSType: to.Ptr(armhybridcontainerservice.OsTypeLinux),
			Count:  to.Ptr(int32(1)),
			Status: &armhybridcontainerservice.AgentPoolProvisioningStatusStatus{
				CurrentState: to.Ptr(armhybridcontainerservice.ResourceProvisioningStateSucceeded),
			},
		},
	}
}